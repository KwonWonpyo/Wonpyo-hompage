{"version":3,"file":"static/js/117.e6101979.chunk.js","mappings":"yNAWMA,EAAW,CACf,yNACA,mSACA,uDACA,+DAqBIC,EAAY,SAAHC,GAAyB,IAAnBC,EAAWD,EAAXC,YAInBC,GAA0BC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9BI,EAAGF,EAAA,GAAEG,EAAUH,EAAA,GACtBI,GAAiCL,EAAAA,EAAAA,UAASL,EAASQ,IAAKG,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjDE,EAAOD,EAAA,GAAEE,EAAaF,EAAA,GAC7BG,GAA2BT,EAAAA,EAAAA,UAAS,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA/BE,EAAID,EAAA,GAAEE,EAAUF,EAAA,GAwBvB,OAhDkB,SAACG,EAAUC,GAC7B,IAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,WACRF,EAAcG,QAAUL,CAC1B,GAAG,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,SAChB,GAAGJ,GACH,OAAO,kBAAMO,cAAcF,EAAI,CACjC,CACA,OAAO,WAAO,CAChB,GAAG,CAACL,GACN,CAWEQ,EAAY,WACV,IAAIC,EAASpB,EACTqB,EAAUb,EACVA,EAXO,IAWQhB,EAASQ,GAAKsB,SAC/BF,GAAU,EACVC,EAAU,GAERD,IAAW5B,EAAS8B,OAClB3B,IACFM,EAAW,GACXQ,EAAW,KAKbJ,EAAcb,EAAS4B,GAAQG,MAAM,EAAGF,IACxCpB,EAAWmB,GACXX,EAAWY,EAAU,GAEzB,GA1Bc,KA6BZG,EAAAA,EAAAA,KAAA,OACEC,UAAU,mBACVC,MAAO,CAAEC,SAAU,OAAQC,OAAQ,QAEnCC,UAEAL,EAAAA,EAAAA,KAAA,KAAAK,SAAIzB,KAGV,EAEAX,EAAUqC,aAAe,CACvBnC,aAAa,GAOf,Q,UC5DA,EAnBgB,WAAH,OACX6B,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CACHC,MAAM,UACNC,YAAY,wCAASJ,UAErBK,EAAAA,EAAAA,MAAA,WAAST,UAAU,OAAOT,GAAG,UAASa,SAAA,EACpCL,EAAAA,EAAAA,KAAA,UAAAK,UACEL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOI,UACpBL,EAAAA,EAAAA,KAAA,MAAAK,UAAIL,EAAAA,EAAAA,KAACW,EAAAA,GAAI,CAACC,GAAG,WAAUP,SAAC,mBAG5BL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUI,UACvBL,EAAAA,EAAAA,KAAC/B,EAAS,CAACE,aAAW,OAExB6B,EAAAA,EAAAA,KAACa,EAAAA,EAAY,QAEV,C","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Validates the first half of an email address.\r\n// const validateText = (text) => {\r\n//   // NOTE: Passes RFC 5322 but not tested on google's standard.\r\n//   // eslint-disable-next-line no-useless-escape\r\n//   const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\r\n//   return re.test(text) || text.length === 0;\r\n// };\r\n\r\nconst messages = [\r\n  '제 홈페이지에 방문해주셔서 감사합니다. 이 사이트가 마음에 드셨으면 좋겠습니다.',\r\n  '새로운 일은 언제나 환영입니다. 게임 개발, 안테나 개발, 클라이언트 개발 등 다양한 직무에 도전해보고 싶습니다.',\r\n  'Thanks for visiting me. I hope you liked my website.',\r\n  'I am Looking for a new job. Please feel free to contact me.',\r\n];\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    if (delay) {\r\n      const id = setInterval(() => {\r\n        savedCallback.current();\r\n      }, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n    return () => {}; // pass linter\r\n  }, [delay]);\r\n};\r\n\r\nconst EmailLink = ({ loopMessage }) => {\r\n  const hold = 50; // ticks to wait after message is complete before rendering next message\r\n  const delay = 50; // tick length in mS\r\n\r\n  const [idx, updateIter] = useState(0); // points to current message\r\n  const [message, updateMessage] = useState(messages[idx]);\r\n  const [char, updateChar] = useState(0); // points to current char\r\n  // const [isActive, setIsActive] = useState(true); // disable when all messages are printed\r\n\r\n  useInterval(() => {\r\n    let newIdx = idx;\r\n    let newChar = char;\r\n    if (char - hold >= messages[idx].length) {\r\n      newIdx += 1;\r\n      newChar = 0;\r\n    }\r\n    if (newIdx === messages.length) {\r\n      if (loopMessage) {\r\n        updateIter(0);\r\n        updateChar(0);\r\n      } else {\r\n        // setIsActive(false);\r\n      }\r\n    } else {\r\n      updateMessage(messages[newIdx].slice(0, newChar));\r\n      updateIter(newIdx);\r\n      updateChar(newChar + 1);\r\n    }\r\n  }, delay);\r\n\r\n  return (\r\n    <div\r\n      className=\"inline-container\"\r\n      style={{ fontSize: '20pt', height: '20vh' }}\r\n      // onMouseEnter={() => setIsActive(false)}\r\n      // onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\r\n    >\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nEmailLink.defaultProps = {\r\n  loopMessage: true,\r\n};\r\n\r\nEmailLink.propTypes = {\r\n  loopMessage: PropTypes.bool,\r\n};\r\n\r\nexport default EmailLink;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Main from '../layouts/Main';\r\nimport EmailLink from '../components/Contact/EmailLink';\r\nimport ContactIcons from '../components/Contact/ContactIcons';\r\n\r\nconst Contact = () => (\r\n  <Main\r\n    title=\"Contact\"\r\n    description=\"권원표 연락처\"\r\n  >\r\n    <article className=\"post\" id=\"contact\">\r\n      <header>\r\n        <div className=\"title\">\r\n          <h2><Link to=\"/contact\">Contact</Link></h2>\r\n        </div>\r\n      </header>\r\n      <div className=\"email-at\">\r\n        <EmailLink loopMessage />\r\n      </div>\r\n      <ContactIcons />\r\n    </article>\r\n  </Main>\r\n);\r\n\r\nexport default Contact;\r\n"],"names":["messages","EmailLink","_ref","loopMessage","_useState","useState","_useState2","_slicedToArray","idx","updateIter","_useState3","_useState4","message","updateMessage","_useState5","_useState6","char","updateChar","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","length","slice","_jsx","className","style","fontSize","height","children","defaultProps","Main","title","description","_jsxs","Link","to","ContactIcons"],"sourceRoot":""}